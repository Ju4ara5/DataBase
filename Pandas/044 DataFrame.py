import numpy as np
import pandas as pd

'''Аргументы в DataFrame:
                         (
                             data: Any = None,
                             index: Any = None,
                             columns: Any = None,
                             dtype: Any = None,
                             copy: Any = None) -> None'''

'Создаем базу данных, результат РАНДОМНЫЙ!:'
my_df = pd.DataFrame(np.random.randn(4, 5),                          # 4 ряда, 5 столбцов
                     [1, 2, 3, 4],                                   # имена рядов
                     ['red', 'orange', 'yellow', 'green', 'blue'])   # имена столбцов

#  результат1:
#          red    orange    yellow     green      blue
#  1 -0.396168  0.874910 -0.364116  1.578201 -0.588446
#  2  0.246954  1.295531  0.963265  0.881550 -0.106298
#  3 -0.602031  0.560015  0.719892 -1.520548 -0.085310
#  4 -1.007360  0.118676  0.577324 -2.515646  1.217777

'''Все результаты что будут ниже будут рандомными 
   и не будут соответствовать таблице (результат1) выше,
   т.к. при каждом новом запуске кода, генерируется новая DataFrame'''

my_df['orange']  # 1   -0.332237  (вернет столбец 'orange')
                 # 2    0.699104
                 # 3   -0.224744
                 # 4   -2.094976
                 # Name: orange, dtype: float64

"Вызов двух столбцов (синтаксис: my_df[['...', '...']])"

my_df[['red', 'blue']]  #         red      blue
                        # 1 -0.374305  2.175017
                        # 2  2.520727  0.926786
                        # 3  1.017967  0.451941
                        # 4 -1.644056  0.892698

'''Создаем DataFrame с дублирующимися значениями столбца red в copy_red'''
my_df['copy_red'] = my_df['red']  #         red    orange    yellow     green      blue  copy_red
                                  # 1 -0.339902  0.290105 -0.618888  0.059697 -0.588965 -0.339902
                                  # 2 -2.198486  2.686700 -0.198860 -1.687572 -1.714228 -2.198486
                                  # 3  1.984793  0.300854 -0.477023  0.358077  0.311938  1.984793
                                  # 4 -0.095578 -0.189922 -1.247854 -1.140186  0.055235 -0.095578

'DataFrame где элементы столбца sum_ro = сумме red и orange'
my_df['sum_ro'] = my_df['red'] + my_df['orange']
# Результат:
#         red    orange    yellow     green      blue  copy_red    sum_ro
# 1  0.577563 -0.423449  2.274545 -0.950912  0.386448  0.577563  0.154114
# 2  0.785362 -1.140093  0.468670 -0.085320  0.095250  0.785362 -0.354731
# 3 -1.595747  0.945790  1.067430 -1.772932 -0.145526 -1.595747 -0.649957
# 4  1.382550  0.546614  1.509586  0.039921 -0.897520  1.382550  1.929163

'Выбор строки по имени'
my_df.loc[2]  # red         1.889898
              # orange      0.211756
              # yellow      0.788695
              # green      -2.038290
              # blue        0.582906
              # copy_red    1.889898
              # sum_ro      2.101653
              # Name: 2, dtype: float64

'''Выбор строки
   С помощью метода iloc, выбор строки спроисходит по индексу, т.е 1 строка -> [0]'''
# выбор 3-й строки:
my_df.iloc[2]  # red        -0.979208
               # orange     -1.564193
               # yellow      0.425191
               # green       0.687122
               # blue        0.432937
               # copy_red   -0.979208
               # sum_ro     -2.543402
               # Name: 3, dtype: float64

'''Получение элемента из DataFrame по индексу столбца и строк'''
# строка 3 столбец 'orange':
my_df.loc[3, 'orange']  # 0.16379821414896711

'Получение подмножества из DataFrame'
# значения из 1 и 3 строки и столбцы 'orange' и 'green'
my_df.loc[[1, 3], ['orange', 'green']]  #      orange     green
                                        # 1 -1.190414  1.418222
                                        # 3  0.717871  1.955577

'УДАЛЕНИЕ:'
'''drop(self,
         labels: Any = None,
         axis: Union[str, int] = 0,  # для столбцов: axis=1, для рядов оставляем по умолчанию axis=0 !
         index: Any = None,
         columns: Any = None,
         level: Any = None,
         inplace: bool = False,
         errors: str = "raise") -> Any'''

'удаляем 3 ряд. для этого надо изменить значение inplace'
my_df.drop(3, inplace=True)
# результат удаления, нет 3 строки:
#         red    orange    yellow     green      blue  copy_red    sum_ro
# 1 -0.765661  0.301790  1.330538 -0.583273 -0.222100 -0.765661 -0.463870
# 2 -0.143273 -0.852791 -0.097612 -0.315982  0.632880 -0.143273 -0.996064
# 4 -0.689139  0.162497  0.229531  0.759157 -1.568695 -0.689139 -0.526643

'''удаляем столбец yellow, для этого меняем значание axis на 1 для работы со столбцами
   и не забываем про inplace=True'''
my_df.drop('yellow', axis=1, inplace=True)
# Результат, нет столбца 'yellow'
#         red    orange     green      blue  copy_red    sum_ro
# 1 -1.149010  0.615728  0.736559 -0.498089 -1.149010 -0.533282
# 2  1.148040  1.124635  0.160701 -1.914847  1.148040  2.272675
# 4 -0.243409  1.619581 -0.526989 -0.459328 -0.243409  1.376173

'''Информация о DataFrame'''
my_df.shape  # (3, 6)     3 ряда, 6 столбцов   тип:tuple
